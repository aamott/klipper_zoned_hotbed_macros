########################################
# Klipper Macros for Zoned Hotbed
# 
# Hotbed zones are aligned in a grid with each zone configured as a generic_heater
########################################

# Set bed temperature: M140 [S<temperature>]
[gcode_macro M140]
rename_existing: M140.1
gcode:
    HEAT_BED_ZONE TARGET={params.S|default(0)}  {rawparams}


# Set bed temperature and wait: M190 S<temperature>
[gcode_macro M190]
rename_existing: M190.1
gcode:
    HEAT_BED_ZONE TARGET={params.S|default(0)} {rawparams} WAIT=1


#############################
# HEAT_BED_ZONE
#
# Zoned hotbed macro. Can heat a specific zone or (default) the entire bed. 
# Call using:
# HEAT_BED_ZONE [TARGET=<target_temperature>] [WAIT=<0/1>] [X_MIN=<x_min>] [Y_MIN=<y_min>] [X_MAX=<x_max>] [Y_MAX=<y_max>] [OBJECT_ONLY=<0/1>]
# TODO: Implement the rest of the above params
#############################
[gcode_macro HEAT_BED_ZONE]
# Each zone is a generic heater, with the following name and a number at the end. 
# The first zone must be 0 and no numbers can be skipped.
# zone 0 should be at the front left corner (x0, y0, unless any offsets are set)
# For example: [generic_heater zone0], [generic_heater zone1]...
# Don't forget quotes around the name!
variable_base_zone_name: 'zone'

# How many zones there are in x and y. A 3x4 grid would be 12 zones named zone0 through zone11.
variable_num_zones_x: 3
variable_num_zones_y: 4
# how many millimeters each zone should be.
# Example: a 400x400mm wide bed with 4x4 equally sized zones would be 100x100mm per zone.
variable_zone_width: 100
variable_zone_height: 100

# X and y position of zone 0's front left corner (default x0 y0)
variable_x_start_pos: 0
variable_y_start_pos: 0

# Minimum temperature any tile can be set at before it is just turned off. Must be greater than 0.
variable_min_set_temp = 40

gcode:
    {% set target = params.TARGET|default(0)|float %}

    # If points weren't passed in, default to the min and max of the object
    {% set x_min = params.X_MIN | default(printer.toolhead.axis_minimum.x) %}
    {% set y_min = params.Y_MIN | default(printer.toolhead.axis_minimum.y) %}
    {% set x_max = params.X_MAX | default(printer.toolhead.axis_maximum.x) %}
    {% set y_max = params.Y_MAX | default(printer.toolhead.axis_maximum.y) %}

    {% if params.OBJECT_ONLY|default(None)  %}
        # Get object points
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}

        # set x y min from smallest object x/y point and max from largest object x/y point.
        # prioritize user specified x/y min/max.
        {% set x_min = params.X_MIN if params.X_MIN else all_points | map(attribute=0) | min | default( printer.toolhead.axis_minimum.x) %}
        {% set y_min = params.Y_MIN if params.Y_MIN else all_points | map(attribute=1) | min | default( printer.toolhead.axis_minimum.y) %}
        {% set x_max = params.X_MAX if params.X_MAX else all_points | map(attribute=0) | max | default( printer.toolhead.axis_maximum.x) %}
        {% set y_max = params.Y_MAX if params.Y_MAX else all_points | map(attribute=1) | max | default( printer.toolhead.axis_maximum.y) %}
    {% endif %}

    # Note that this starts in the bottom left (x,y origin)
    {% set zone_idx = -1 %} # zone will be incremented right away, so has to start at -1
    {% set zone_temps = [] %}
    {% for row in range(num_zones_y) %}
        {% for col in range(num_zones_x) %}
            # increment zone
            {% set zone_idx = zone_idx + 1 %}
            {% set heater_name = base_zone_name + zone_idx|string %}

            # get zone min and max points
            {% set zone_x_min = row * zone_height + x_start_pos %}
            {% set zone_y_min = col * zone_width + y_start_pos %}
            # zone max
            {% set zone_x_max = (row + 1) * zone_height + x_start_pos %}
            {% set zone_y_max = (col + 1) * zone_width + y_start_pos %}

            # check if the zone touches the part
            # if zone touches part, heat it
            {% if x_min < zone_x_max and x_max > zone_x_min and
                y_min < zone_y_max and y_max > zone_y_min  %}
                # set target temp
                {% set zone_target = target %}
                # heat the zone
                SET_HEATER_TEMPERATURE HEATER={heater_name} TARGET={zone_target}
                # {{ zone_temps.append(target) }}
                {% set zone_temps = zone_temps + [target] %}
            # TODO: warm nearby zones, not fully heated, to prevent warping.
            # {% elif x_min < zone_x_max + range and x_max > zone_x_min - range and
            #     y_min < zone_y_max + range and y_max > zone_y_min - range %}
            #     {% set zone_target = target * a_percent %}
            # {% endif %}
            # default to turning zones off. 
            # TODO: should we allow multiple areas to be set at once? How do we prioritize temperature?
            {% else %}
                # {% zone_temps.append('0') %}
                {% set zone_temps = zone_temps + ['0'] %}
                SET_HEATER_TEMPERATURE HEATER={heater_name} TARGET=0
            {% endif %}
            
        {% endfor %}
    {% endfor %}

    # if wait param is true, cycle through all heaters and wait for them to complete. 
    {% if params.WAIT|default(None) %}
        {% for zone_target in zone_temps  %}
            # Wait for warming zones to warm, but not cool. Wait for full temp zones to cool.
            {% if zone_target == target and zone_target > min_set_temp %} 
                TEMPERATURE_WAIT SENSOR={"heater_generic " + heater_name} MINIMUM=zone_target  MAXIMUM=zone_target
            {% elif zone_target > min_set_temp %} 
                # Warm zones can be between main target temp and warm temp
                TEMPERATURE_WAIT SENSOR={"heater_generic " + heater_name} MINIMUM=zone_target MAXIMUM=target
            {% endif %}
        {% endfor %}
    {% endif %}
